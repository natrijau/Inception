| üß± Mot-cl√©      | üí° Exemple concret                                                                |   |                                     |
| --------------- | --------------------------------------------------------------------------------- | - | ----------------------------------- |
| **FROM**        | `FROM node:20-alpine` ‚Äì commence une image l√©g√®re avec Node.js 20 pr√©install√©     |   |                                     |
| **RUN**         | `RUN apt-get update && apt-get install -y git` ‚Äì installe Git                     |   |                                     |
| **CMD**         | `CMD ["npm", "start"]` ‚Äì lance une app Node par d√©faut                            |   |                                     |
| **ENTRYPOINT**  | `ENTRYPOINT ["docker-entrypoint.sh"]` ‚Äì toujours ex√©cut√©, m√™me avec des arguments |   |                                     |
| **WORKDIR**     | `WORKDIR /usr/src/app` ‚Äì positionne le dossier courant                            |   |                                     |
| **COPY**        | `COPY . .` ‚Äì copie tout le dossier local dans l'image                             |   |                                     |
| **ADD**         | `ADD https://site.com/file.zip /src/` ‚Äì t√©l√©charge et ajoute un fichier distant   |   |                                     |
| **LABEL**       | `LABEL version="1.0" maintainer="zitoune@42.fr"` ‚Äì info sur l‚Äôimage               |   |                                     |
| **ENV**         | `ENV PORT=3000` ‚Äì cr√©e une variable d‚Äôenvironnement                               |   |                                     |
| **ARG**         | `ARG BUILD_VERSION=1.0` ‚Äì accessible uniquement pendant le build                  |   |                                     |
| **EXPOSE**      | `EXPOSE 8080` ‚Äì indique que l'app √©coute sur ce port                              |   |                                     |
| **VOLUME**      | `VOLUME /data` ‚Äì d√©clare un volume persistant                                     |   |                                     |
| **USER**        | `USER node` ‚Äì change d'utilisateur dans le conteneur                              |   |                                     |
| **ONBUILD**     | `ONBUILD RUN npm install` ‚Äì d√©clenche `npm install` dans l‚Äôimage fille            |   |                                     |
| **SHELL**       | `SHELL ["/bin/bash", "-c"]` ‚Äì passe de `sh` √† `bash` pour les commandes           |   |                                     |
| **HEALTHCHECK** | \`HEALTHCHECK CMD curl -f [http://localhost](http://localhost)                    |   | exit 1\` ‚Äì v√©rifie que l‚Äôapp tourne |
| **STOPSIGNAL**  | `STOPSIGNAL SIGINT` ‚Äì change le signal d‚Äôarr√™t par d√©faut                         |   |                                     |


Pour installer Docker Compose sur une machine Debian, tu peux suivre ces √©tapes :
1. Mettre √† jour le syst√®me

Avant d'installer Docker Compose, il est recommand√© de mettre √† jour les paquets de ton syst√®me.

sudo apt update
sudo apt upgrade -y

2. Installer Docker (si ce n'est pas d√©j√† fait)

Si Docker n'est pas encore install√© sur ton syst√®me, tu peux l'installer en suivant ces √©tapes :

sudo apt install apt-transport-https ca-certificates curl software-properties-common -y

# Ajouter la cl√© officielle de Docker
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

# Ajouter le d√©p√¥t Docker stable
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"

# Mettre √† jour les d√©p√¥ts
sudo apt update

# Installer Docker
sudo apt install docker-ce -y

# V√©rifier l'installation de Docker
sudo systemctl status docker

3. Installer Docker Compose

Ensuite, pour installer Docker Compose, tu peux suivre ces √©tapes :

# T√©l√©charger la derni√®re version de Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# Appliquer les permissions d'ex√©cution
sudo chmod +x /usr/local/bin/docker-compose

# V√©rifier l'installation de Docker Compose
docker-compose --version

4. (Optionnel) Utiliser Docker Compose sans sudo

Si tu veux utiliser Docker et Docker Compose sans avoir √† ajouter sudo √† chaque commande, ajoute ton utilisateur au groupe Docker :

sudo usermod -aG docker $USER

Puis, d√©connecte-toi et reconnecte-toi ou red√©marre ton syst√®me pour appliquer les modifications.

Voil√†, tu devrais maintenant avoir Docker Compose install√© sur ton syst√®me Debian.


ChatGPT can make mistakes. Check important info. See Cookie Preferences.
